#lang play

#|

Hizo Ud uso de la whiteboard policy: (Indique SI/NO) NO
En caso que afirmativo, indique con quién y sobre qué ejercicio:
-
-

|#

;;------------ ;;
;;==== P2 ==== ;;
;;------------ ;;


;;----- ;;
;; P1.a ;;
;;----- ;;


#|
<prop> ::= (tt)
         | (ff)
         | (p-id <sym>)
         | (p-not <prop>)
         | (p-and <prop>)
         | (p-or <prop>)
         | (p-where <prop> <id> <prop>)
|#

(deftype Prop
  (tt)
  (ff)
  (p-not n)
  (p-and a)
  (p-or o)
  (p-where p i q)
  (p-id s)
  )


;;----- ;;
;; P1.b ;;
;;----- ;;

#|
Concrete syntax of propositions:

<s-prop> ::= true
          | false
          |<sym>
          |(list 'not <s-prop>)
          |(list 'and <s-prop>)
          |(list 'or <s-prop>)
          |(list '<s-prop> where(list <sym> <s-prop>)) 
|#

;; parse-prop : <s-prop> -> Prop
(define (parse-prop s-expr)
   (match s-expr
     ['true (tt)]      
     ['false (ff)]
     [(? symbol? x) (p-id x) ]
     [(list 'and formula ...)
       (if (< (length formula) 2)
         (error 'parse-prop "and expects at least two operands")
         (p-and (map parse-prop formula)))] 

     [(list 'or formula ...)   (if (< (length formula) 2)
         (error 'parse-prop "or expects at least two operands")
         (p-or (map parse-prop formula)))]
     
     [(list 'not formula) (p-not  (parse-prop formula))]
     [(list formula 'where (list id expr)) (p-where (parse-prop formula) id (parse-prop expr))]
     )
  )


;;----- ;;
;; P1.c ;;
;;----- ;;


#|
<pvalue> ::= (ttV)
           | (ffV)
|#
(deftype PValue
  (ttV)
  (ffV))



;; from-Pvalue : PValue -> Prop
(define (from-PValue pv)
  (match pv
    [(ttV) (tt)]
    [(ffV) (ff)]))



;;----- ;;
;; P1.d ;;
;;----- ;;


;; p-subst : Prop Symbol Prop -> Prop
(define (p-subst target name substitution) '???)


;;----- ;;
;; P1.e ;;
;;----- ;;


;; eval-or : (Listof Prop) -> PValue
(define (eval-or ps) '???)

;; eval-and : (Listof Prop) -> PValue
(define (eval-and ps) '???)

;; p-eval : Prop -> PValue
(define (p-eval p) '???)

;;------------ ;;
;;==== P2 ==== ;;
;;------------ ;;

;;----- ;;
;; P2.a ;;
;;----- ;;


#|
<expr> ::= ...
        | (add <expr> <expr>)
        | (sub <expr> <expr>)
        | (if0 <expr> <expr> <expr>)
        | ...
|#
(deftype Expr
  ; ...
  (add l r)
  (sub l r)
  (if0 c t f)
  ; ...
  )

;;----- ;;
;; P2.b ;;
;;----- ;;

#|
Concrete syntax of expressions:

<s-expr> ::= ...
        | (+ <s-expr> <s-expr>)
        | (- <s-expr> <s-expr>)
        | (if0 <s-expr> <s-expr> <s-expr>)
        | ...
|#

;; parse : <s-expr> -> Expr

(define (parse s-expr) '???)

;;----- ;;
;; P2.c ;;
;;----- ;;

;; subst :: Expr Symbol Expr -> Expr
(define (subst in what for) '???)

;;----- ;;
;; P2.d ;;
;;----- ;;

#|
<cvalue> ::= (compV <num> <num>)
|#

(deftype CValue (compV r i))

;; from-CValue :: CValue -> Expr
(define (from-CValue v) '???)

;; cmplx+ :: CValue CValue -> CValue
(define (cmplx+ v1 v2) '???)

;; cmplx- :: CValue CValue -> CValue
(define (cmplx- v1 v2) '???)

;; cmplx0? :: CValue -> Boolean
(define (cmplx0? v) '???)


;;----- ;;
;; P2.e ;;
;;----- ;;

;; interp : Expr -> CValue
(define (interp expr) '???)
